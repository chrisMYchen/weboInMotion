{
    "1": {
        "id": 1,
        "class": "Sequence",
        "name": "",
        "children": [
            2,
            4
        ],
        "options": {}
    },
    "2": {
        "id": 2,
        "class": "PlayAudio",
        "name": "Play FX_Holyhappiness.mp3 after a period of time",
        "asset-pack": "core",
        "parent": 1,
        "decorators": [
            3
        ],
        "options": {
            "audioPath": "FX_Holyhappiness.mp3"
        }
    },
    "3": {
        "id": 3,
        "class": "StartOnCondition",
        "name": "",
        "asset-pack": "core",
        "options": {
            "init": [
                "() => {",
                "    //called once when the decorator starts.",
                "    self.timeToWait = 2000 + Math.random() * 4000;",
                "    self.startTime = Date.now();",
                "}"
            ],
            "conditional": [
                "() => {",
                "    //this function is called every frame. The first time this function returns",
                "    //true, the behavior is succeeded.",
                "    //succeed if this behavior has been in progress for more than self.startTime",
                "    return Date.now() - self.startTime > self.timeToWait;",
                "}"
            ]
        }
    },
    "4": {
        "id": 4,
        "class": "Parallel",
        "name": "",
        "asset-pack": "core",
        "parent": 1,
        "children": [
            5,
            10
        ],
        "options": {
            "succeedOnOne": false
        }
    },
    "5": {
        "id": 5,
        "class": "PlayAudio",
        "name": "Play FX_Holyhappiness.mp3 when an event is fired",
        "asset-pack": "core",
        "parent": 4,
        "decorators": [
            8
        ],
        "options": {
            "audioPath": "FX_Holyhappiness.mp3"
        }
    },
    "8": {
        "id": 8,
        "class": "StartOnEvent",
        "name": "",
        "asset-pack": "core",
        "options": {
            "eventName": "start",
            "onEvent": [
                "(foobar, baz) => {",
                "    console.log('Got payload', foobar, baz);",
                "}"
            ]
        }
    },
    "10": {
        "id": 10,
        "class": "Sequence",
        "name": "",
        "asset-pack": "core",
        "parent": 4,
        "children": [
            11,
            12
        ],
        "options": {}
    },
    "11": {
        "id": 11,
        "class": "TimeoutJs",
        "name": "Wait for a bit",
        "asset-pack": "core",
        "parent": 10,
        "options": {
            "getTime": [
                "() => {",
                "    return 2000 + Math.random() * 4000;",
                "}"
            ]
        }
    },
    "12": {
        "id": 12,
        "class": "ExecuteScript",
        "name": "",
        "asset-pack": "core",
        "parent": 10,
        "options": {
            "exec": [
                "() => {",
                "    //emit a start event with a payload",
                "    emitter.emit('start', {foo: \"bar\"}, \"baz\");",
                "}"
            ]
        }
    },
    "meta": {
        "version": 1
    }
}