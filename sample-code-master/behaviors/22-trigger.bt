{
    "1": {
        "id": 1,
        "class": "Sequence",
        "name": "",
        "asset-pack": "core",
        "children": [
            "7fb7c0c7-f9ee-4b7b-bc67-e73fccea30a7",
            "f615089e-9b01-4ee7-8c27-1e6ee68c462c",
            "009578b6-abf7-448a-9181-e619c976e7d5",
            "7653fd4d-38be-43be-87e8-ca9e72cc9035",
            "c382e28c-8998-4c2c-86c1-7c0afc7e9fdb"
        ],
        "decorators": [],
        "options": {}
    },
    "6": {
        "id": 6,
        "class": "TakePhoto",
        "name": "take photo on shutter-click event",
        "options": {
            "resolution": 2,
            "onPhoto": [
                "(error, imageUrl) => {",
                "  ",
                "// put the photo's URL on the notepad",
                "notepad.imageUrl = imageUrl;",
                "",
                "}"
            ],
            "noDistortion": true
        },
        "asset-pack": "core",
        "parent": "f615089e-9b01-4ee7-8c27-1e6ee68c462c",
        "decorators": [
            "273514a2-af90-4962-8e12-d3a53388d345"
        ]
    },
    "meta": {
        "version": 1
    },
    "7653fd4d-38be-43be-87e8-ca9e72cc9035": {
        "id": "7653fd4d-38be-43be-87e8-ca9e72cc9035",
        "class": "TimeoutJs",
        "name": "pause with photo on screen for 10 seconds",
        "options": {
            "getTime": [
                "() => {",
                "    return 10000;",
                "}"
            ]
        },
        "asset-pack": "core",
        "parent": 1
    },
    "c382e28c-8998-4c2c-86c1-7c0afc7e9fdb": {
        "id": "c382e28c-8998-4c2c-86c1-7c0afc7e9fdb",
        "class": "ExecuteScript",
        "name": "display the eye again",
        "options": {
            "exec": [
                "() => {",
                "  //remove the image from the screen",
                "  jibo.face.stage.removeChild(notepad.photo); ",
                "  ",
                "  //force draw",
                "  jibo.face.update(); ",
                "  ",
                "  //render only when dof values are dirty",
                "  jibo.face.renderOnlyWhenDirty = true; ",
                "}"
            ]
        },
        "asset-pack": "core",
        "parent": 1
    },
    "f615089e-9b01-4ee7-8c27-1e6ee68c462c": {
        "id": "f615089e-9b01-4ee7-8c27-1e6ee68c462c",
        "class": "Parallel",
        "name": "",
        "options": {
            "succeedOnOne": false
        },
        "asset-pack": "core",
        "parent": 1,
        "children": [
            "183e8b3c-372e-4a38-88be-caf4385eaec1",
            6
        ]
    },
    "183e8b3c-372e-4a38-88be-caf4385eaec1": {
        "id": "183e8b3c-372e-4a38-88be-caf4385eaec1",
        "class": "PlayAnimation",
        "name": "play the camera animation",
        "options": {
            "animPath": "camera.keys",
            "config": [
                "(animation) => {",
                "}"
            ]
        },
        "asset-pack": "core",
        "parent": "f615089e-9b01-4ee7-8c27-1e6ee68c462c"
    },
    "273514a2-af90-4962-8e12-d3a53388d345": {
        "id": "273514a2-af90-4962-8e12-d3a53388d345",
        "class": "StartOnAnimEvent",
        "name": "",
        "options": {
            "eventName": "shutter-click",
            "onReceived": [
                "(animFileName, payload) => {",
                "}"
            ]
        },
        "asset-pack": "core"
    },
    "009578b6-abf7-448a-9181-e619c976e7d5": {
        "id": "009578b6-abf7-448a-9181-e619c976e7d5",
        "class": "ExecuteScript",
        "name": "",
        "options": {
            "exec": [
                "() => {",
                "  //redraw every frame",
                "  jibo.face.renderOnlyWhenDirty = false; ",
                "  ",
                "  // create new Pixi sprite",
                "  notepad.photo = new PIXI.Sprite();",
                "  ",
                "  // set the texture of the sprite to the imageURL",
                "  notepad.photo.texture = PIXI.Texture.fromImage(notepad.imageUrl);",
                "  ",
                "  //Emotion API return data",
                "  var fs = require('fs');",
                "  var request = require('request');",
                "  //Creates file from taken picture",
                "  request.get({url: notepad.imageUrl, encoding: 'binary'}, function (err, response, body) {",
                "    fs.writeFile(\"./face.jpg\", body, 'binary', function(err) {",
                "      if(err)",
                "        console.log(err);",
                "      else",
                "        console.log(\"The file was saved!\");",
                "    }); ",
                "  });",
                "  ",
                "  var oxfordEmotion = require(\"node-oxford-emotion\")(\"3e43fabb36c940eaaa66b84ab5840869\");",
                "  var bitmap = fs.readFileSync(\"./face.jpg\");",
                "  var bf = new Buffer(bitmap.toString('binary'),'binary');",
                "  var emotion = oxfordEmotion.recognize(\"image\", bf, function(cb) {",
                "    var data = JSON.parse(cb);",
                "    var firstFaceEmotions = data[0]['scores'];",
                "    var mostApparentEmotion = \"anger\";",
                "    var mostApparentEmotionCertainty = 0;",
                "    for (var emotion in firstFaceEmotions){",
                "      if (firstFaceEmotions.hasOwnProperty(emotion)) {",
                "           if (firstFaceEmotions[emotion] > mostApparentEmotionCertainty) {",
                "              mostApparentEmotion = emotion;",
                "              mostApparentEmotionCertainty = firstFaceEmotions[emotion];",
                "           }",
                "      }",
                "    }",
                "  ",
                "    //now set jibo.face.values or whatever and set values to dirty and update",
                "    ",
                "    // set the texture of the sprite to the imageURL",
                "    notepad.photo.texture = PIXI.Texture.fromImage(notepad.imageUrl);",
                "      ",
                "    // add the sprite to the stage",
                "    jibo.face.stage.addChild(notepad.photo);",
                "  });",
                "}"
            ]
        },
        "asset-pack": "core",
        "parent": 1
    },
    "7fb7c0c7-f9ee-4b7b-bc67-e73fccea30a7": {
        "id": "7fb7c0c7-f9ee-4b7b-bc67-e73fccea30a7",
        "class": "LookAt",
        "name": "if face then trigger",
        "options": {
            "getTarget": [
                "// 1. wait and do nothing until someone comes into the scene",
                "",
                "() => {",
                "  notepad.foundFace = false;",
                "  let jibo = require('jibo');",
                "  let entity = jibo.lps.getClosestVisualEntity();",
                "  console.log(entity);",
                "  let position = {x:.5, y:.1, z:.4};",
                "",
                "  //let currentTime = jibo.animate.getClock().currentTime();",
                "  //let elapsed = currentTime.subtract(notepad.startTime); ",
                "  if (entity){",
                "    position = {x: entity.position.x, y: entity.position.y, z: entity.position.z};",
                "    notepad.foundFace = true;",
                "  }",
                "  return position;",
                "}"
            ],
            "isContinuous": true,
            "config": [
                "(lookAt) => {",
                "}"
            ]
        },
        "asset-pack": "core",
        "parent": 1,
        "decorators": [
            "e5a2ee5c-70f2-4c5f-9243-f0040888484c"
        ]
    },
    "e5a2ee5c-70f2-4c5f-9243-f0040888484c": {
        "id": "e5a2ee5c-70f2-4c5f-9243-f0040888484c",
        "class": "FailOnCondition",
        "name": "",
        "options": {
            "init": [
                "(() => {",
                "    notepad.foundFace = false;",
                "  },",
                "  () => {",
                "    return notepad.foundFace",
                "  }){",
                "    ",
                "}"
            ],
            "conditional": [
                "() => {",
                "}"
            ]
        },
        "asset-pack": "core"
    }
}